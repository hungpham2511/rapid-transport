This package implements functionalities for time-optimal path
parameterization for object-transportation.

To simplify a contact, then parametrize a trajectory, run the
following script:
#+BEGIN_SRC sh
  transport.paper simplify-contact -c bigcup_bluenb\
		  -o bluenb -a denso_suction_cup2\
		  -T "[[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 23.5e-3], [0, 0, 0, 1]]"\
		  -r suctioncup1 -v

  python parametrize_trajectory.py -t suctioncup_traj5a\
	 -c bigskirt_squarewood2_a2e54d1ae4\
	 -o squarewood2 -a denso_suction_cup2\
	 -T "[[1, 0, 0, 0e-3], [0, -1, 0, 0], [0, 0, -1, 23.5e-3], [0, 0, 0, 1]]"\
	 -r suctioncup1 -l topp_fast_2 -v
#+END_SRC

To run a trajectory
#+BEGIN_SRC sh
  python run_trajectory.py -t suctioncup_traj5a_14ca6c4b6c
#+END_SRC

TO start the Denso hardware
#+BEGIN_SRC sh
  roslaunch ftsensorless hardware_interface.launch robot_ip:=192.168.0.11\
	    ftsensor_ip:=192.168.0.12 gripper_ip:=192.168.0.14\
	    has_gripper:=false

 roslaunch ftsensorless controllers.launch load_position_joint_controller:=true

#+END_SRC


* Note on testing

  need to activate environment ros, and run gazebo virtual environment for testing

  #+BEGIN_SRC sh
    # term 1
    workon ros
    roslaunch ftsensorless gazebo_interface.launch robot_urdf:=denso_robotiq_85_gripper_pin  
    # term 2
    workon ros
    roslaunch ftsensorless controllers.launch load_position_joint_controller:=true

    # then, in term 3, test by running
    pytest -v # or -x to 
  #+END_SRC
  
* bigcup w/out skirt with blue notebook experiment
  contact: bigcup_bluenb
  attached to bluenb

  #+BEGIN_SRC sh
    transport.paper simplify-contact -c bigcup_bluenb\
		    -o bluenb -a denso_suction_cup2\
		    -T "[[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 12.5e-3], [0, 0, 0, 1]]"\
		    -r suctioncup1 -v

    transport.paper simplify-contact -c bigcup_bluenb\
		    -o squarewood2 -a denso_suction_cup2\
		    -T "[[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 12.5e-3], [0, 0, 0, 1]]"\
		    -r suctioncup1 -v

    python parametrize_trajectory.py -c bigcup_bluenb_1608823082\
	   -o bluenb -a denso_suction_cup2\
	   -T "[[1, 0, 0, 0e-3], [0, -1, 0, 0], [0, 0, -1, 12.5e-3], [0, 0, 0, 1]]"\
	   -t suctioncup_traj5a\
	   -r suctioncup1 -l topp_fast_2  -v

    python run_trajectory.py -t suctioncup_traj5a_57c22f0413

  #+END_SRC
  
* quantitative experiment
  
  the EXPERIMENT to finish.

  #+BEGIN_SRC sh
  transport.paper pick-demo --scene "scenarios/exp1.scenario.yaml" -e 
  #+END_SRC
* robust experiment (<2018-07-03 Tue>)

  In this experiment, I compare two strategies. One is
  parameterization without considering contact stability. The other
  one is parameterization considering an approximation of contact
  stability named `bigcup_analytical_rigid2`.

  I will test 10 trajectories, and see how it goes.
  
  | traj id | kin_only | w_contact (rigid2) | w_contact (rigid3) |
  |---------+----------+--------------------+--------------------|
  |       0 | LL-0.434 | S-0.760            |                    |
  |       1 | F-0.567  | F-0.940            |                    |
  |       2 | S-0.940  | S-1.24             |                    |
  |       3 | L-0.506  | S-0.794            |                    |
  |       4 | L-0.727  | S-1.36             |                    |
  |       5 | L-0.500  | S-0.78             |                    |
  |       6 | S-1.061  | S-1.467            |                    |
  |       7 | F-0.520  | S-0.807            |                    |
  |       8 | F-1.141  | S-1.827            |                    |
  |       9 | F-0.493  | S-0.860            |                    |
  |      10 | F-0.626  | S-0.847            |                    |
  |      11 | L-0.520  | S-0.76             |                    |
  |      12 | F-0.440  | S-0.82             |                    |
  |      13 | S-0.827  | S-1.59             |                    |
  |      14 | L-1.110  | U                  |                    |
  |      15 | F-0.526  | FF-0.77            | F-0.95             |
  |      16 | L-0.520  | FS-0.827           |                    |
  |      17 | L-1.341  | U                  |                    |
  |      18 | L-0.473  | S-0.874            |                    |
  |      19 | L-0.513  | FS-0.707           | SS-0.85            |

* robust experiment (<2018-06-23 Sat>)
  #+LaTeX_CLASS: koma-article
  
  I devise this experiment to prove and to investigate the extent to
  which consideration of the physics of the equipped suction cup
  improves the rate of succesful object transportation.
  
  15 geometric paths are pre-selected. Different strategies are used
  to time-parametrize the geometric paths. The resulting trajectories
  are executed on a Denso VS-060.

  The main entry point of this experiment is a program, whose source
  code can be found [[file:~/git/toppra-object-transport/transport/console/robust_experiment.py::from%20..contact%20import%20Contact][here]]. To run the program, simply invoke
  ~transport.paper robust-experiment~ with appropriate parameters. See
  the below example script which runs the basic strategy ~nil~ on a
  geometric path called ~traj1~.
  #+BEGIN_SRC sh
    transport.paper robust-experiment -c bigcup_bluenb_1608823082 \
		    -o bluenb -a denso_suction_cup2 -T "[[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 12.5e-3], [0, 0, 0, 1]]" \
		    -t traj1 \
		    -S nil \
		    -d 1.0 -e -v
  #+END_SRC


  I also want to test several object configuration. For instance, the
  blue notebook attached at the upright pose is one configuration.
  - 5 object/transform configuration

    See svg file `robust_exp_configurations.svg`

    1. Configuration 1: blue notebook, its long edge is parallel to the suction cup's X-AXIS.

       #+BEGIN_SRC sh
	 -o bluenb -a denso_suction_cup2 -T "[[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 12.5e-3], [0, 0, 0, 1]]" \
       #+END_SRC

    2. Configuration 2: blue notebook, its short edge is parallel to the suction cup's X-AXIS.

       #+BEGIN_SRC sh
       -o bluenb -a denso_suction_cup2 -T "[[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 12.5e-3], [0, 0, 0, 1]]" \
       #+END_SRC

    3. Same as configuration 1: the notebook is shifted 2 cm along the suctioncup's X-AXIS

       #+BEGIN_SRC sh
       -o bluenb -a denso_suction_cup2 -T "[[1, 0, 0, 20e-3], [0, -1, 0, 0], [0, 0, -1, 12.5e-3], [0, 0, 0, 1]]" \
       #+END_SRC

  - 5 trajectories
  - 3 different strategies
    - nil
    - w_contact: (parametrize with bigcup_bluenb_9d14c4040a, now
      freeze to do experiment)
    - w_contact (use -d to scale vel to 1.3 times faster)
    - w_contact_jerk
    - kin_only
    - kin_only (use -d to scale vel to 0.7 times faster)
  - contacs profiles

    bigcup_bluenb_1608823082 (original)

    bigcup_bluenb_f6b66fa04f

    bigcup_bluenb_5db183bed2

    bigcup_bluenb_9d14c4040a (generated with COVER_VERTICES)

    bigcup_bluenb_safe_9d14c4040a (a new set of contact, generated with safe traj)

  object/transform 1: bluenb at perpendicular
  #+BEGIN_SRC sh
    transport.paper robust-experiment -c bigcup_bluenb_1608823082 \
		    -o bluenb -a denso_suction_cup2 -T "[[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 12.5e-3], [0, 0, 0, 1]]" \
		    -t traj1 \
		    -S nil \
		    -d 1.0 -e -v
  #+END_SRC

  object/transform 1: bluenb at perpendicular
  #+BEGIN_SRC sh
    transport.paper robust-experiment -c bigcup_bluenb_1608823082 \
		    -o bluenb -a denso_suction_cup2 -T "[[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 12.5e-3], [0, 0, 0, 1]]" \
		    -t traj1 \
		    -S nil \
		    -d 1.0 -e -v
  #+END_SRC


  Results for configuration 1:

  format for each : Record(F/S)x5-TrajectoryDuration

  L: fail due to excessive slipping. S: success. F: fail. U: param fails.

  | Traj-Algorithm    | nil       | kin_only    | kin_only_0.8speed | w_contact   | w_contact 0.9 safety | w_contact (analytical) * | w_contact (analytical) ** |
  |-------------------+-----------+-------------+-------------------+-------------+----------------------+--------------------------+---------------------------|
  | suctioncup_traj1  | SSSSS-1.0 | SSSSS-0.760 |                   | SSSSS-0.767 |                      |                          |                           |
  | suctioncup_traj2  | SSSSS-1.0 | SSSSS-1.281 |                   | SSSSS-1.433 |                      |                          |                           |
  | suctioncup_traj3  | SSSSS-1.0 | SSSSF-0.934 |                   | SSFSF-0.987 |                      |                          |                           |
  | suctioncup_traj4  | SFFFF-1.0 | FFFFF-0.900 |                   | FFF-0.994   | FSF-1.067            |                          | S-1.26                    |
  | suctioncup_traj5a | SSSSS-1.0 | LLLLL-0.454 |                   | LL-0.594    |                      |                          |                           |
  | traj1             | SSSSS-1.0 | SFSSS-0.760 |                   | S-0.767     |                      |                          |                           |
  | traj2             | SSSSS-1.0 | FFFFF-1.087 |                   | SF-1.281    |                      | U                        |                           |
  | traj3             | FFFFF-1.0 | FFFFF-1.367 |                   | FF-1.427    |                      | U                        |                           |
  | traj4             | SSSSS-1.0 | FFFSS-0.854 |                   | F-0.934     |                      | U                        |                           |
  | traj5             | FFSFF-1.0 | FFFFF-1.001 |                   | FF-1.214    |                      | U                        |                           |
  | traj6             | FFFFF-1.0 | FFFFF-1.567 |                   | FF-1.92     |                      | U                        |                           |
  | traj7             | FFFFF-1.0 | FFFFF-0.954 |                   | FFF-1.127   |                      | U                        |                           |
  | traj8             | SSSFF-1.0 | SSFSF-0.827 |                   | F-0.847     |                      | SS-0.907                 | S-0.853                   |
  | traj9             | SSSSS-1.0 | FSFSF-0.807 |                   | F-0.827     |                      | S-0.873                  | S-0.820                   |
  | traj10            | FFFFF-1.0 | FFFFF-0.914 |                   |             |                      | FSS-1.107                | F                         |

  * this constraint was generated with the following parameters: 
    #+BEGIN_SRC python
      PA = 15.0  # Newton
      mu = 0.3
      r = 12.5e-3  # radius of the cup
      N = 6
    #+END_SRC
    
  ** this constraint was generated with the following parameters:
    #+BEGIN_SRC python
      PA = 18.0  # Newton
      mu = 0.3
      r = 12.5e-3  # radius of the cup
      N = 6
    #+END_SRC

* Usage

  Information on contacts and objects are stored in a database,
  implemented via yaml. The syntax is quite simple. An entry of
  contact profile, for example the one below
  #+BEGIN_SRC yaml
    bigcup_analytical:
      id: bigcup_analytical
      attached_to_manipulator: denso_suction_cup2
      description: Contact stability constraint coefficients derived from an anlytical model of the suction cup.
      orientation:
      - [1, 0, 0]
      - [0, 1, 0]
      - [0, 0, 1]
      position: [0, 0, 0]
      constraint_coeffs_file: bigcup_analytical.npz
  #+END_SRC
  contains the manipulator frame it attachs to, the relative
  orientation and position and finally the numpy archive containing
  the constraint coefficients $\mathbf A, \mathbf b$ 
  \[\mathbf A \mathbf w \leq \mathbf b.\]

  An entry of object, such as the one below, 
  #+BEGIN_SRC yaml
    carton_box:
      description: The carton_box, padded with a wooden plate inside.
      rave_model: objects/carton_box.xml
      mass: 0.347
      local_inertia:
	- [ 9.8e-4, 0,        0     ]
	- [ 0,        2.96e-3, 0     ]
	- [ 0,        0,       3.77e-3]
      T_object_model:
	- [1, 0, 0, -0.0065]
	- [0, 1, 0, 0]
	- [0, 0, 1, 0]
	- [0, 0, 0, 1]
  #+END_SRC
  contains a link to the openrave model of it, its mass and its moment
  of inertia expressed in a frame whose origin is at its
  center-of-mass. Note that here, the origin of the local frame has an
  origin coincides with its com.
  
